// Code generated by entc, DO NOT EDIT.

package entc

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/author"
	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/film"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// FilmCreate is the builder for creating a Film entity.
type FilmCreate struct {
	config
	mutation *FilmMutation
	hooks    []Hook
}

// SetStatus sets the status field.
func (fc *FilmCreate) SetStatus(i int8) *FilmCreate {
	fc.mutation.SetStatus(i)
	return fc
}

// SetNillableStatus sets the status field if the given value is not nil.
func (fc *FilmCreate) SetNillableStatus(i *int8) *FilmCreate {
	if i != nil {
		fc.SetStatus(*i)
	}
	return fc
}

// SetCreatedAt sets the created_at field.
func (fc *FilmCreate) SetCreatedAt(t time.Time) *FilmCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (fc *FilmCreate) SetNillableCreatedAt(t *time.Time) *FilmCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the updated_at field.
func (fc *FilmCreate) SetUpdatedAt(t time.Time) *FilmCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (fc *FilmCreate) SetNillableUpdatedAt(t *time.Time) *FilmCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetTitle sets the title field.
func (fc *FilmCreate) SetTitle(s string) *FilmCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetDescription sets the description field.
func (fc *FilmCreate) SetDescription(s string) *FilmCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetID sets the id field.
func (fc *FilmCreate) SetID(u uuid.UUID) *FilmCreate {
	fc.mutation.SetID(u)
	return fc
}

// AddAuthorIDs adds the authors edge to Author by ids.
func (fc *FilmCreate) AddAuthorIDs(ids ...uuid.UUID) *FilmCreate {
	fc.mutation.AddAuthorIDs(ids...)
	return fc
}

// AddAuthors adds the authors edges to Author.
func (fc *FilmCreate) AddAuthors(a ...*Author) *FilmCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fc.AddAuthorIDs(ids...)
}

// Mutation returns the FilmMutation object of the builder.
func (fc *FilmCreate) Mutation() *FilmMutation {
	return fc.mutation
}

// Save creates the Film in the database.
func (fc *FilmCreate) Save(ctx context.Context) (*Film, error) {
	if _, ok := fc.mutation.Status(); !ok {
		v := film.DefaultStatus
		fc.mutation.SetStatus(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := film.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := film.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.Title(); !ok {
		return nil, &ValidationError{Name: "title", err: errors.New("entc: missing required field \"title\"")}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return nil, &ValidationError{Name: "description", err: errors.New("entc: missing required field \"description\"")}
	}
	var (
		err  error
		node *Film
	)
	if len(fc.hooks) == 0 {
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilmCreate) SaveX(ctx context.Context) *Film {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FilmCreate) sqlSave(ctx context.Context) (*Film, error) {
	f, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}

func (fc *FilmCreate) createSpec() (*Film, *sqlgraph.CreateSpec) {
	var (
		f     = &Film{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: film.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: film.FieldID,
			},
		}
	)
	if id, ok := fc.mutation.ID(); ok {
		f.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: film.FieldStatus,
		})
		f.Status = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: film.FieldCreatedAt,
		})
		f.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: film.FieldUpdatedAt,
		})
		f.UpdatedAt = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldTitle,
		})
		f.Title = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldDescription,
		})
		f.Description = value
	}
	if nodes := fc.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.AuthorsTable,
			Columns: film.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return f, _spec
}
