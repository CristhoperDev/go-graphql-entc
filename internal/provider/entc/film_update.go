// Code generated by entc, DO NOT EDIT.

package entc

import (
	"context"
	"fmt"
	"time"

	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/author"
	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/film"
	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
)

// FilmUpdate is the builder for updating Film entities.
type FilmUpdate struct {
	config
	hooks      []Hook
	mutation   *FilmMutation
	predicates []predicate.Film
}

// Where adds a new predicate for the builder.
func (fu *FilmUpdate) Where(ps ...predicate.Film) *FilmUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetStatus sets the status field.
func (fu *FilmUpdate) SetStatus(i int8) *FilmUpdate {
	fu.mutation.ResetStatus()
	fu.mutation.SetStatus(i)
	return fu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (fu *FilmUpdate) SetNillableStatus(i *int8) *FilmUpdate {
	if i != nil {
		fu.SetStatus(*i)
	}
	return fu
}

// AddStatus adds i to status.
func (fu *FilmUpdate) AddStatus(i int8) *FilmUpdate {
	fu.mutation.AddStatus(i)
	return fu
}

// SetUpdatedAt sets the updated_at field.
func (fu *FilmUpdate) SetUpdatedAt(t time.Time) *FilmUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetTitle sets the title field.
func (fu *FilmUpdate) SetTitle(s string) *FilmUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetDescription sets the description field.
func (fu *FilmUpdate) SetDescription(s string) *FilmUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// AddAuthorIDs adds the authors edge to Author by ids.
func (fu *FilmUpdate) AddAuthorIDs(ids ...uuid.UUID) *FilmUpdate {
	fu.mutation.AddAuthorIDs(ids...)
	return fu
}

// AddAuthors adds the authors edges to Author.
func (fu *FilmUpdate) AddAuthors(a ...*Author) *FilmUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fu.AddAuthorIDs(ids...)
}

// Mutation returns the FilmMutation object of the builder.
func (fu *FilmUpdate) Mutation() *FilmMutation {
	return fu.mutation
}

// RemoveAuthorIDs removes the authors edge to Author by ids.
func (fu *FilmUpdate) RemoveAuthorIDs(ids ...uuid.UUID) *FilmUpdate {
	fu.mutation.RemoveAuthorIDs(ids...)
	return fu
}

// RemoveAuthors removes authors edges to Author.
func (fu *FilmUpdate) RemoveAuthors(a ...*Author) *FilmUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fu.RemoveAuthorIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FilmUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := film.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilmUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilmUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilmUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FilmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   film.Table,
			Columns: film.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: film.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: film.FieldStatus,
		})
	}
	if value, ok := fu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: film.FieldStatus,
		})
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: film.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldTitle,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldDescription,
		})
	}
	if nodes := fu.mutation.RemovedAuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.AuthorsTable,
			Columns: film.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.AuthorsTable,
			Columns: film.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{film.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FilmUpdateOne is the builder for updating a single Film entity.
type FilmUpdateOne struct {
	config
	hooks    []Hook
	mutation *FilmMutation
}

// SetStatus sets the status field.
func (fuo *FilmUpdateOne) SetStatus(i int8) *FilmUpdateOne {
	fuo.mutation.ResetStatus()
	fuo.mutation.SetStatus(i)
	return fuo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableStatus(i *int8) *FilmUpdateOne {
	if i != nil {
		fuo.SetStatus(*i)
	}
	return fuo
}

// AddStatus adds i to status.
func (fuo *FilmUpdateOne) AddStatus(i int8) *FilmUpdateOne {
	fuo.mutation.AddStatus(i)
	return fuo
}

// SetUpdatedAt sets the updated_at field.
func (fuo *FilmUpdateOne) SetUpdatedAt(t time.Time) *FilmUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetTitle sets the title field.
func (fuo *FilmUpdateOne) SetTitle(s string) *FilmUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetDescription sets the description field.
func (fuo *FilmUpdateOne) SetDescription(s string) *FilmUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// AddAuthorIDs adds the authors edge to Author by ids.
func (fuo *FilmUpdateOne) AddAuthorIDs(ids ...uuid.UUID) *FilmUpdateOne {
	fuo.mutation.AddAuthorIDs(ids...)
	return fuo
}

// AddAuthors adds the authors edges to Author.
func (fuo *FilmUpdateOne) AddAuthors(a ...*Author) *FilmUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fuo.AddAuthorIDs(ids...)
}

// Mutation returns the FilmMutation object of the builder.
func (fuo *FilmUpdateOne) Mutation() *FilmMutation {
	return fuo.mutation
}

// RemoveAuthorIDs removes the authors edge to Author by ids.
func (fuo *FilmUpdateOne) RemoveAuthorIDs(ids ...uuid.UUID) *FilmUpdateOne {
	fuo.mutation.RemoveAuthorIDs(ids...)
	return fuo
}

// RemoveAuthors removes authors edges to Author.
func (fuo *FilmUpdateOne) RemoveAuthors(a ...*Author) *FilmUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fuo.RemoveAuthorIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FilmUpdateOne) Save(ctx context.Context) (*Film, error) {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := film.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *Film
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilmUpdateOne) SaveX(ctx context.Context) *Film {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FilmUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilmUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FilmUpdateOne) sqlSave(ctx context.Context) (f *Film, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   film.Table,
			Columns: film.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: film.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Film.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: film.FieldStatus,
		})
	}
	if value, ok := fuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: film.FieldStatus,
		})
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: film.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldTitle,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: film.FieldDescription,
		})
	}
	if nodes := fuo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.AuthorsTable,
			Columns: film.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   film.AuthorsTable,
			Columns: film.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &Film{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{film.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
