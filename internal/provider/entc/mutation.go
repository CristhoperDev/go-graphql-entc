// Code generated by entc, DO NOT EDIT.

package entc

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/author"
	"github.com/CristhoperDev/go-graphql-entc/internal/provider/entc/film"
	"github.com/google/uuid"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthor = "Author"
	TypeFilm   = "Film"
)

// AuthorMutation represents an operation that mutate the Authors
// nodes in the graph.
type AuthorMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	status        *int8
	addstatus     *int8
	created_at    *time.Time
	updated_at    *time.Time
	fullName      *string
	age           *int8
	addage        *int8
	clearedFields map[string]struct{}
	films         map[uuid.UUID]struct{}
	removedfilms  map[uuid.UUID]struct{}
	done          bool
	oldValue      func(context.Context) (*Author, error)
}

var _ ent.Mutation = (*AuthorMutation)(nil)

// authorOption allows to manage the mutation configuration using functional options.
type authorOption func(*AuthorMutation)

// newAuthorMutation creates new mutation for $n.Name.
func newAuthorMutation(c config, op Op, opts ...authorOption) *AuthorMutation {
	m := &AuthorMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthorID sets the id field of the mutation.
func withAuthorID(id uuid.UUID) authorOption {
	return func(m *AuthorMutation) {
		var (
			err   error
			once  sync.Once
			value *Author
		)
		m.oldValue = func(ctx context.Context) (*Author, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Author.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthor sets the old Author of the mutation.
func withAuthor(node *Author) authorOption {
	return func(m *AuthorMutation) {
		m.oldValue = func(context.Context) (*Author, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entc: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Author creation.
func (m *AuthorMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AuthorMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatus sets the status field.
func (m *AuthorMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *AuthorMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the Author.
// If the Author object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AuthorMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *AuthorMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *AuthorMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *AuthorMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the created_at field.
func (m *AuthorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *AuthorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Author.
// If the Author object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AuthorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *AuthorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *AuthorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *AuthorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the Author.
// If the Author object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AuthorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *AuthorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFullName sets the fullName field.
func (m *AuthorMutation) SetFullName(s string) {
	m.fullName = &s
}

// FullName returns the fullName value in the mutation.
func (m *AuthorMutation) FullName() (r string, exists bool) {
	v := m.fullName
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old fullName value of the Author.
// If the Author object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AuthorMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFullName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName reset all changes of the "fullName" field.
func (m *AuthorMutation) ResetFullName() {
	m.fullName = nil
}

// SetAge sets the age field.
func (m *AuthorMutation) SetAge(i int8) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *AuthorMutation) Age() (r int8, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Author.
// If the Author object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AuthorMutation) OldAge(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *AuthorMutation) AddAge(i int8) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *AuthorMutation) AddedAge() (r int8, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *AuthorMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// AddFilmIDs adds the films edge to Film by ids.
func (m *AuthorMutation) AddFilmIDs(ids ...uuid.UUID) {
	if m.films == nil {
		m.films = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.films[ids[i]] = struct{}{}
	}
}

// RemoveFilmIDs removes the films edge to Film by ids.
func (m *AuthorMutation) RemoveFilmIDs(ids ...uuid.UUID) {
	if m.removedfilms == nil {
		m.removedfilms = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedfilms[ids[i]] = struct{}{}
	}
}

// RemovedFilms returns the removed ids of films.
func (m *AuthorMutation) RemovedFilmsIDs() (ids []uuid.UUID) {
	for id := range m.removedfilms {
		ids = append(ids, id)
	}
	return
}

// FilmsIDs returns the films ids in the mutation.
func (m *AuthorMutation) FilmsIDs() (ids []uuid.UUID) {
	for id := range m.films {
		ids = append(ids, id)
	}
	return
}

// ResetFilms reset all changes of the "films" edge.
func (m *AuthorMutation) ResetFilms() {
	m.films = nil
	m.removedfilms = nil
}

// Op returns the operation name.
func (m *AuthorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Author).
func (m *AuthorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AuthorMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, author.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, author.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, author.FieldUpdatedAt)
	}
	if m.fullName != nil {
		fields = append(fields, author.FieldFullName)
	}
	if m.age != nil {
		fields = append(fields, author.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AuthorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case author.FieldStatus:
		return m.Status()
	case author.FieldCreatedAt:
		return m.CreatedAt()
	case author.FieldUpdatedAt:
		return m.UpdatedAt()
	case author.FieldFullName:
		return m.FullName()
	case author.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AuthorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case author.FieldStatus:
		return m.OldStatus(ctx)
	case author.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case author.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case author.FieldFullName:
		return m.OldFullName(ctx)
	case author.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Author field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AuthorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case author.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case author.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case author.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case author.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case author.FieldAge:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Author field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AuthorMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, author.FieldStatus)
	}
	if m.addage != nil {
		fields = append(fields, author.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AuthorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case author.FieldStatus:
		return m.AddedStatus()
	case author.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AuthorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case author.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case author.FieldAge:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Author numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AuthorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AuthorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Author nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AuthorMutation) ResetField(name string) error {
	switch name {
	case author.FieldStatus:
		m.ResetStatus()
		return nil
	case author.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case author.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case author.FieldFullName:
		m.ResetFullName()
		return nil
	case author.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Author field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AuthorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.films != nil {
		edges = append(edges, author.EdgeFilms)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AuthorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case author.EdgeFilms:
		ids := make([]ent.Value, 0, len(m.films))
		for id := range m.films {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AuthorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfilms != nil {
		edges = append(edges, author.EdgeFilms)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AuthorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case author.EdgeFilms:
		ids := make([]ent.Value, 0, len(m.removedfilms))
		for id := range m.removedfilms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AuthorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AuthorMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AuthorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Author unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AuthorMutation) ResetEdge(name string) error {
	switch name {
	case author.EdgeFilms:
		m.ResetFilms()
		return nil
	}
	return fmt.Errorf("unknown Author edge %s", name)
}

// FilmMutation represents an operation that mutate the Films
// nodes in the graph.
type FilmMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	status         *int8
	addstatus      *int8
	created_at     *time.Time
	updated_at     *time.Time
	title          *string
	description    *string
	clearedFields  map[string]struct{}
	authors        map[uuid.UUID]struct{}
	removedauthors map[uuid.UUID]struct{}
	done           bool
	oldValue       func(context.Context) (*Film, error)
}

var _ ent.Mutation = (*FilmMutation)(nil)

// filmOption allows to manage the mutation configuration using functional options.
type filmOption func(*FilmMutation)

// newFilmMutation creates new mutation for $n.Name.
func newFilmMutation(c config, op Op, opts ...filmOption) *FilmMutation {
	m := &FilmMutation{
		config:        c,
		op:            op,
		typ:           TypeFilm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFilmID sets the id field of the mutation.
func withFilmID(id uuid.UUID) filmOption {
	return func(m *FilmMutation) {
		var (
			err   error
			once  sync.Once
			value *Film
		)
		m.oldValue = func(ctx context.Context) (*Film, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Film.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFilm sets the old Film of the mutation.
func withFilm(node *Film) filmOption {
	return func(m *FilmMutation) {
		m.oldValue = func(context.Context) (*Film, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FilmMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FilmMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entc: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Film creation.
func (m *FilmMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FilmMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatus sets the status field.
func (m *FilmMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *FilmMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the Film.
// If the Film object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FilmMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *FilmMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *FilmMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *FilmMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the created_at field.
func (m *FilmMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *FilmMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Film.
// If the Film object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FilmMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *FilmMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *FilmMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *FilmMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the Film.
// If the Film object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FilmMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *FilmMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTitle sets the title field.
func (m *FilmMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *FilmMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old title value of the Film.
// If the Film object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FilmMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "title" field.
func (m *FilmMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the description field.
func (m *FilmMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the description value in the mutation.
func (m *FilmMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old description value of the Film.
// If the Film object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FilmMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription reset all changes of the "description" field.
func (m *FilmMutation) ResetDescription() {
	m.description = nil
}

// AddAuthorIDs adds the authors edge to Author by ids.
func (m *FilmMutation) AddAuthorIDs(ids ...uuid.UUID) {
	if m.authors == nil {
		m.authors = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.authors[ids[i]] = struct{}{}
	}
}

// RemoveAuthorIDs removes the authors edge to Author by ids.
func (m *FilmMutation) RemoveAuthorIDs(ids ...uuid.UUID) {
	if m.removedauthors == nil {
		m.removedauthors = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedauthors[ids[i]] = struct{}{}
	}
}

// RemovedAuthors returns the removed ids of authors.
func (m *FilmMutation) RemovedAuthorsIDs() (ids []uuid.UUID) {
	for id := range m.removedauthors {
		ids = append(ids, id)
	}
	return
}

// AuthorsIDs returns the authors ids in the mutation.
func (m *FilmMutation) AuthorsIDs() (ids []uuid.UUID) {
	for id := range m.authors {
		ids = append(ids, id)
	}
	return
}

// ResetAuthors reset all changes of the "authors" edge.
func (m *FilmMutation) ResetAuthors() {
	m.authors = nil
	m.removedauthors = nil
}

// Op returns the operation name.
func (m *FilmMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Film).
func (m *FilmMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FilmMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, film.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, film.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, film.FieldUpdatedAt)
	}
	if m.title != nil {
		fields = append(fields, film.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, film.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FilmMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case film.FieldStatus:
		return m.Status()
	case film.FieldCreatedAt:
		return m.CreatedAt()
	case film.FieldUpdatedAt:
		return m.UpdatedAt()
	case film.FieldTitle:
		return m.Title()
	case film.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FilmMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case film.FieldStatus:
		return m.OldStatus(ctx)
	case film.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case film.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case film.FieldTitle:
		return m.OldTitle(ctx)
	case film.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Film field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FilmMutation) SetField(name string, value ent.Value) error {
	switch name {
	case film.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case film.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case film.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case film.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case film.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Film field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FilmMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, film.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FilmMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case film.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FilmMutation) AddField(name string, value ent.Value) error {
	switch name {
	case film.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Film numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FilmMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FilmMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FilmMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Film nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FilmMutation) ResetField(name string) error {
	switch name {
	case film.FieldStatus:
		m.ResetStatus()
		return nil
	case film.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case film.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case film.FieldTitle:
		m.ResetTitle()
		return nil
	case film.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Film field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FilmMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.authors != nil {
		edges = append(edges, film.EdgeAuthors)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FilmMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case film.EdgeAuthors:
		ids := make([]ent.Value, 0, len(m.authors))
		for id := range m.authors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FilmMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedauthors != nil {
		edges = append(edges, film.EdgeAuthors)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FilmMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case film.EdgeAuthors:
		ids := make([]ent.Value, 0, len(m.removedauthors))
		for id := range m.removedauthors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FilmMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FilmMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FilmMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Film unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FilmMutation) ResetEdge(name string) error {
	switch name {
	case film.EdgeAuthors:
		m.ResetAuthors()
		return nil
	}
	return fmt.Errorf("unknown Film edge %s", name)
}
